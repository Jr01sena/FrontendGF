// Servicio para manejar operaciones de centros de formaci√≥n
import { request } from './apiClient.js';

export const centroService = {
    /**
     * Obtiene todos los centros de formaci√≥n
     * @returns {Promise<Array>} Lista de centros de formaci√≥n
     */
    getAllCentros: async () => {
        try {
            console.log('üåê centroService: Iniciando petici√≥n a /centro/get-all');
            const token = localStorage.getItem('accessToken');
            console.log('üîë Token disponible:', token ? 'S√ç' : 'NO');
            if (token) {
                console.log('üîë Token (primeros 50 chars):', token.substring(0, 50) + '...');
            }
            
            const centros = await request('/centro/get-all');
            console.log('‚úÖ centroService: Respuesta exitosa:', centros);
            return centros;
        } catch (error) {
            console.error('‚ùå centroService: Error al obtener centros:', error);
            throw error;
        }
    },

    /**
     * Crea un nuevo centro de formaci√≥n
     * @param {Object} centroData - Datos del centro a crear
     * @param {number} centroData.cod_centro - C√≥digo del centro
     * @param {string} centroData.nombre_centro - Nombre del centro
     * @param {number} centroData.cod_regional - C√≥digo de la regional
     * @returns {Promise<Object>} Respuesta del servidor
     */
    createCentro: async (centroData) => {
        try {
            console.log('üåê centroService: Creando centro:', centroData);
            
            const response = await request('/centro/create', {
                method: 'POST',
                body: JSON.stringify(centroData)
            });
            
            console.log('‚úÖ centroService: Centro creado exitosamente:', response);
            return response;
        } catch (error) {
            console.error('‚ùå centroService: Error al crear centro:', error);
            throw error;
        }
    },

    /**
     * Actualiza un centro de formaci√≥n existente
     * @param {number} codCentro - C√≥digo del centro a actualizar
     * @param {Object} centroData - Datos del centro a actualizar
     * @param {string} centroData.nombre_centro - Nuevo nombre del centro
     * @param {number} centroData.cod_regional - Nuevo c√≥digo de la regional
     * @returns {Promise<Object>} Respuesta del servidor
     */
    updateCentro: async (codCentro, centroData) => {
        try {
            console.log(`üåê centroService: Actualizando centro ${codCentro}:`, centroData);
            
            const response = await request(`/centro/update/${codCentro}`, {
                method: 'PUT',
                body: JSON.stringify(centroData)
            });
            
            console.log('‚úÖ centroService: Centro actualizado exitosamente:', response);
            return response;
        } catch (error) {
            console.error('‚ùå centroService: Error al actualizar centro:', error);
            throw error;
        }
    }
}; 